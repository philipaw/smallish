### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type Chat {
  createdAt: DateTime!
  id: ID!
  members(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]
  name: String!
  owner: User
  picture: String
  updatedAt: DateTime!
}

input ChatCreateManyWithoutMembersInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutMembersInput!]
}

input ChatCreateManyWithoutOwnerInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutOwnerInput!]
}

input ChatCreateWithoutMembersInput {
  id: ID
  messages: MessageCreateManyWithoutChatInput
  name: String!
  owner: UserCreateOneWithoutChatsOwnedInput
  picture: String
}

input ChatCreateWithoutOwnerInput {
  id: ID
  members: UserCreateManyWithoutChatsInput
  messages: MessageCreateManyWithoutChatInput
  name: String!
  picture: String
}

enum ChatOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  members_every: UserWhereInput
  members_none: UserWhereInput
  members_some: UserWhereInput
  messages_every: MessageWhereInput
  messages_none: MessageWhereInput
  messages_some: MessageWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  owner: UserWhereInput
  picture: String
  picture_contains: String
  picture_ends_with: String
  picture_gt: String
  picture_gte: String
  picture_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_not: String
  picture_not_contains: String
  picture_not_ends_with: String
  picture_not_in: [String!]
  picture_not_starts_with: String
  picture_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

type Message {
  chat: Chat!
  createdAt: DateTime!
  id: ID!
  sender: User
  text: String!
  updatedAt: DateTime!
}

input MessageCreateManyWithoutChatInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutChatInput!]
}

input MessageCreateWithoutChatInput {
  id: ID
  sender: UserCreateOneInput
  text: String!
}

enum MessageOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  chat: ChatWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  sender: UserWhereInput
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createDraft(authorId: ID, title: String): Post!
  createUser(data: UserCreateInput!): User!
  deletePost(where: PostWhereUniqueInput!): Post
  publish(id: ID): Post
}

type Post {
  author: User!
  body: String!
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  updatedAt: DateTime!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  body: String!
  id: ID
  published: Boolean
}

enum PostOrderByInput {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  body: String
  body_contains: String
  body_ends_with: String
  body_gt: String
  body_gte: String
  body_in: [String!]
  body_lt: String
  body_lte: String
  body_not: String
  body_not_contains: String
  body_not_ends_with: String
  body_not_in: [String!]
  body_not_starts_with: String
  body_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: Boolean
  published_not: Boolean
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  allPosts: [Post!]!
  feed: [Post!]!
  post(where: PostWhereUniqueInput!): Post
  postsByUser(email: String): [Post!]!
}

type User {
  chats(after: String, before: String, first: Int, last: Int, orderBy: ChatOrderByInput, skip: Int, where: ChatWhereInput): [Chat!]
  chatsOwned(after: String, before: String, first: Int, last: Int, orderBy: ChatOrderByInput, skip: Int, where: ChatWhereInput): [Chat!]
  createdAt: DateTime!
  email: String
  handle: String
  id: ID!
  name: String
  picture: String
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
  updatedAt: DateTime!
}

input UserCreateInput {
  chats: ChatCreateManyWithoutMembersInput
  chatsOwned: ChatCreateManyWithoutOwnerInput
  email: String
  handle: String
  id: ID
  name: String
  picture: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutChatsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutChatsInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutChatsOwnedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChatsOwnedInput
}

input UserCreateWithoutChatsInput {
  chatsOwned: ChatCreateManyWithoutOwnerInput
  email: String
  handle: String
  id: ID
  name: String
  picture: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutChatsOwnedInput {
  chats: ChatCreateManyWithoutMembersInput
  email: String
  handle: String
  id: ID
  name: String
  picture: String
  posts: PostCreateManyWithoutAuthorInput
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  handle_ASC
  handle_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  chats_every: ChatWhereInput
  chats_none: ChatWhereInput
  chats_some: ChatWhereInput
  chatsOwned_every: ChatWhereInput
  chatsOwned_none: ChatWhereInput
  chatsOwned_some: ChatWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  handle: String
  handle_contains: String
  handle_ends_with: String
  handle_gt: String
  handle_gte: String
  handle_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_not: String
  handle_not_contains: String
  handle_not_ends_with: String
  handle_not_in: [String!]
  handle_not_starts_with: String
  handle_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  picture: String
  picture_contains: String
  picture_ends_with: String
  picture_gt: String
  picture_gte: String
  picture_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_not: String
  picture_not_contains: String
  picture_not_ends_with: String
  picture_not_in: [String!]
  picture_not_starts_with: String
  picture_starts_with: String
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  handle: String
  id: ID
}
